{"version":3,"sources":["components/TronLinkGuide/index.js","utils/index.js","components/App/Table.js","components/App/Form.js","components/App/register.js","components/App/Content.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png"],"names":["WEBSTORE_URL","logo","react_default","a","createElement","className","src","TronLinkLogo","alt","openTronLink","window","open","TronLinkGuide","props","_props$installed","installed","onClick","href","target","rel","utils","tronWeb","contract","setTronWeb","_setTronWeb","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","this","at","sent","stop","_x","apply","arguments","React","Component","Register","_this","classCallCheck","_super","call","state","value","handleChange","bind","assertThisInitialized","event","setState","_this2","address","onSubmit","preventDefault","multiSendTrx","type","onChange","id","placeholder","name","login","Content","App_register","candidates","App","hasVoted","loading","isRegisterred","error","dataFetched","data","owner","isLoggedin","user_data","tronrate","loggedIn","voteCandidate","Promise","resolve","tronWebState","ready","tries","timer","setInterval","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","Utils","fetchData","startEventListener","fetchOwner","get_coin_rate","Multisended","watch","err","console","log","Swal","title","_this3","result","activate_user","sender","_callee2","_context2","_callee3","CandidateCount","i","candidate_tmp","_context3","candidatecount","toNumber","toConsumableArray","push","voteCount","_callee4","referral_address","user_id","url","res","data1","addr","trx_rate","cf_amt","og_amt","admin_amt","trx_cf_amt","trx_og_amt","trx_admin_amt","amount","totalValue","_this4","_context4","fetch","json","message","success","cf_address","og_refer","parseFloat","multisendEther","send","shouldPollResponse","callValue","then","catch","failed_payment","_callee5","_context5","TRX","_callee6","_context6","_callee7","_context7","_referral","my_address","register","_callee8","_url","_context8","location","e","amt1","candidateId","vote","App_Content","castVote","components_TronLinkGuide","ReactDOM","render","components_App","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c93473c0.chunk.js","sourcesContent":["import React from 'react';\n\nimport TronLinkLogo from './TronLinkLogo.png';\nimport './TronLinkGuide.scss';\n\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\n\nconst logo = (\n    <div className='logo'>\n        <img src={ TronLinkLogo } alt='TronLink logo' />\n    </div>\n);\n\nconst openTronLink = () => {\n    window.open(WEBSTORE_URL, '_blank');\n};\n\nconst TronLinkGuide = props => {\n    const {\n        installed = false\n    } = props;\n\n    if(!installed) {\n        return (\n            <div className='tronLink' onClick={ openTronLink }>\n                <div className='info'>\n                    <h1>TronLink Required</h1>\n                    <p>\n                        To create a post or tip others you must install TronLink. TronLink is a TRON wallet for the browser\n                        that can be <a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\n                        Once installed, return back and refresh the page.\n                    </p>\n                </div>\n                { logo }\n            </div>\n        );\n    }\n\n    return (\n        <div className='tronLink hover' onClick={ openTronLink }>\n            <div className='info'>\n                <h1>Log in Required</h1>\n                <p>\n                    TronLink is installed but you must first log in. Open TronLink from the browser bar and set up your\n                    first wallet or decrypt a previously-created wallet.\n                </p>\n            </div>\n            { logo }\n        </div>\n    );\n};\n\nexport default TronLinkGuide;","const contractAddress = 'TV8a5PxfrRDVB5dtRm3x5PUJWmRHzaNTU2'\n\nconst utils = {\n    tronWeb: false,\n    contract: false,\n\n    async setTronWeb(tronWeb) {\n        this.tronWeb = tronWeb;\n        this.contract = await tronWeb.contract().at(contractAddress)\n    },\n\n};\n\nexport default utils;\n\n","import React from 'react'\n\nclass Table extends React.Component {\n  render() {\n    return (\n      <table className='table'>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name of candidate</th>\n            <th>Votes</th>\n          </tr>\n        </thead>\n        <tbody >\n          {this.props.candidates.map((candidate) => {\n            return(\n              <tr key={candidate.id.toString()}>\n                <th>{candidate.id}</th>\n                <td>{candidate.name}</td>\n                <td>{candidate.voteCount}</td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    )\n  }\n}\n\nexport default Table;\n","import React from 'react'\n\nclass From extends React.Component {\n  render() {\n    return (\n      <form onSubmit={(event) => {\n        event.preventDefault()\n        this.props.castVote(this.candidateId.value)\n      }}>\n        <div className='form-group'>\n          <label>Candidate Selection</label>\n          <select ref={(input) => this.candidateId = input} className='form-control'>\n            {this.props.candidates.map((candidate) => {\n              return <option key={candidate.id.toString()} value={candidate.id}>{candidate.name}</option>\n            })}\n          </select>\n        </div>\n        <button type='submit' className='btn btn-primary'>Vote here</button>\n        <hr />\n      </form>\n\n     \n     \n    )\n  }\n}\n\nexport default From;\n","import React, { Component, PropTypes } from 'react';\r\n\r\nclass Register extends React.Component {\r\n   constructor(props) {\r\n    super(props);\r\n    this.state = {value: ''};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    \r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  \r\n\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"card\">\r\n          <div className=\"card-body\">\r\n          <h6>My Tron Address</h6>\r\n          <h3>{this.props.address}</h3>\r\n        \t <form onSubmit={(event) => {\r\n        event.preventDefault()\r\n        this.props.multiSendTrx(this.state.value)\r\n      }}>\r\n        <div className='form-group'>\r\n          \r\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} id=\"referal_address\" placeholder=\"Enter Referral Address\" name=\"referal_address\" />\r\n        </div>\r\n\r\n        <button type='submit'  className='btn btn-primary m-3'>Register</button>\r\n\r\n        \r\n\r\n        <hr />\r\n      </form>\r\n\r\n      <button  className='btn btn-primary m-3' onClick={this.props.login}>Login</button>\r\n      </div>\r\n      </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;\r\n","import React from 'react'\nimport Table from './Table'\nimport Form from './Form'\nimport Register from './register'\n\nclass Content extends React.Component {\n  render() {\n    return (\n      <div>\n        <Register candidates={this.props.candidates} multiSendTrx={this.props.multiSendTrx} address={this.props.address} login={this.props.login} />\n       \n        \n        <hr/>\n        \n      </div>\n    )\n  }\n}\n\nexport default Content;\n","import React from 'react';\nimport TronLinkGuide from 'components/TronLinkGuide';\nimport TronWeb from 'tronweb';\nimport Utils from 'utils';\nimport Swal from 'sweetalert2';\nimport Content from './Content';\n\nimport './App.scss';\n\nconst FOUNDATION_ADDRESS = 'TXqqHYESMNUUXms7YT9hDqAr1pdyzMig4E';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            candidates: [],\n            address: '',\n            hasVoted: false,\n            loading: false,\n            isRegisterred: false,\n            error: null,\n            dataFetched: false,\n            data: null,\n            owner:null,\n            isLoggedin:false,\n            user_data:null,\n            tronrate:null,\n\n\n            tronWeb: {\n                installed: false,\n                loggedIn: false\n            },\n        }\n\n        this.voteCandidate = this.voteCandidate.bind(this)\n        this.multiSendTrx = this.multiSendTrx.bind(this)\n\n    }\n\n    async componentDidMount() {\n\n\n\n\n\n        this.setState({ loading: true })\n        await new Promise(resolve => {\n            const tronWebState = {\n                installed: !!window.tronWeb,\n                loggedIn: window.tronWeb && window.tronWeb.ready\n\n            };\n\n\n\n            if (tronWebState.installed) {\n                this.setState({\n                    tronWeb: tronWebState\n                });\n\n                return resolve();\n            }\n\n            let tries = 0;\n\n            const timer = setInterval(() => {\n                if (tries >= 10) {\n                    const TRONGRID_API = 'https://api.trongrid.io';\n\n                    window.tronWeb = new TronWeb(\n                        TRONGRID_API,\n                        TRONGRID_API,\n                        TRONGRID_API\n                    );\n\n                    this.setState({\n                        tronWeb: {\n                            installed: false,\n                            loggedIn: false\n                        }\n                    });\n\n                    clearInterval(timer);\n                    return resolve();\n                }\n\n                tronWebState.installed = !!window.tronWeb;\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n\n                if (!tronWebState.installed)\n                    return tries++;\n\n                this.setState({\n                    tronWeb: tronWebState\n                });\n\n                resolve();\n            }, 100);\n        });\n\n        if (!this.state.tronWeb.loggedIn) {\n            // Set default address (foundation address) used for contract calls\n            // Directly overwrites the address object as TronLink disabled the\n            // function call\n            window.tronWeb.defaultAddress = {\n                hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                base58: FOUNDATION_ADDRESS\n            };\n\n            window.tronWeb.on('addressChanged', () => {\n                if (this.state.tronWeb.loggedIn)\n                    return;\n\n                this.setState({\n                    tronWeb: {\n                        installed: true,\n                        loggedIn: true,\n                        address: window.tronWeb.defaultAddress\n                    }\n                });\n            });\n        }\n        await Utils.setTronWeb(window.tronWeb);\n        this.fetchData();\n        this.startEventListener();\n        this.setState({ loading: false })\n        this.fetchOwner();\n        this.get_coin_rate();\n\n\n\n\n\n\n\n    }\n\n    startEventListener() {\n        Utils.contract.Multisended().watch((err) => {\n\n            if (err) {\n                return console.log('Failed to bind the event', err);\n            }\n\n            Swal({\n                title: 'User Registered Successfully',\n                type: 'success'\n                });\n\n              \n        });\n\n    }\n\n\n     startRegisterEventListener() {\n        Utils.contract.multiSendTrx().watch((err,result) => {\n\n            if (err) {\n                return console.log('Failed to bind the event', err);\n            }\n\n            else\n            {\n                Swal({\n                title: 'User Registered Successfully',\n                type: 'success'\n                });\n\n                this.activate_user(result.sender);\n\n            }\n\n           \n\n        });\n\n    }\n\n\n    async fetchOwner() {\n         const owner = (await Utils.contract.owner().call());\n        console.log('owner', owner);\n        \n            this.setState({owner:owner})\n\n\n    }\n\n    async fetchData() {\n\n        const address = window.tronWeb.defaultAddress.base58;\n        console.log('my address', address);\n\n        const CandidateCount = (await Utils.contract.candidatecount().call()).toNumber();\n        console.log('CandidateCount', CandidateCount);\n\n        for (var i = 1; i <= CandidateCount; i++) {\n\n            const candidate_tmp = await Utils.contract.candidates(i).call();\n            console.log('candidate_tmp', candidate_tmp);\n\n            const candidates = [...this.state.candidates];\n\n            candidates.push({\n                id: candidate_tmp.id.toNumber(),\n                name: candidate_tmp.name,\n                voteCount: candidate_tmp.voteCount.toNumber()\n            });\n\n            this.setState({ candidates: candidates })\n\n\n\n        }\n\n    }\n\n\n\n    async register(referral_address, user_id) {\n\n        const url = \"https://www.trondesire.io/api/register_api?sponcer_id=\"+ referral_address +\"&user_id=\" + user_id;\n        console.log(url);\n        const res = await fetch(url);\n\n        const data1 = await res.json();\n        console.log(data1.message);\n        this.setState({ data: data1 });\n        this.setState({ dataFetched: true });\n\n\n      \n\n        if (this.state.data.success == true) {\n            const addr = [this.state.data.data.cf_address, this.state.data.data.og_refer, this.state.data.data.owner];\n\n\n            this.get_coin_rate();\n            const trx_rate = this.state.tronrate;\n\n            console.log(\"Trx rate\",trx_rate);\n\n            const cf_amt = this.state.data.data.cf_amt;\n            const og_amt = this.state.data.data.og_amt;\n            const admin_amt = this.state.data.data.admin_amt;\n\n            const trx_cf_amt = parseFloat((cf_amt*1000000),10);\n            const trx_og_amt = parseFloat((og_amt*1000000),10);\n            const trx_admin_amt = parseFloat((admin_amt*1000000),10);\n\n            console.log(trx_cf_amt);\n\n            const amount = [trx_cf_amt, trx_og_amt,trx_admin_amt];\n            const totalValue = trx_cf_amt+trx_og_amt+trx_admin_amt;\n\n            console.log(addr);\n            console.log(amount);\n\n\n\n            Utils.contract.multisendEther(addr, amount).send({\n                shouldPollResponse: true,\n                callValue: totalValue\n                }).then(res => {\n                    this.activate_user(user_id);\n                }).catch(err => {\n                    this.failed_payment(user_id);\n                });\n        }\n\n        else{\n\n            Swal({\n                title: this.state.data.message,\n                type: 'error'\n            });\n\n        }\n\n       \n\n    }\n\n\n\n    async get_coin_rate()\n    {\n        \n        const url = \"https://min-api.cryptocompare.com/data/price?fsym=usd&tsyms=trx\";\n        console.log(url);\n        const res = await fetch(url);\n         const data1 = await res.json();\n         console.log(data1.TRX);\n         this.setState({tronrate:data1.TRX});\n\n    }\n\n   async failed_payment(user_id)\n    {\n        const url = \"https://www.trondesire.io/api/deleteuser?user_id=\"+user_id;\n        console.log(url);\n        const res = await fetch(url);\n         const data1 = await res.json();\n        this.setState({ data: data1 });\n        this.setState({ dataFetched: true });\n         if (this.state.data.success == true) \n         {\n            Swal({\n                title: this.state.data.message,\n                type: 'error'\n            });\n         }\n    }\n\n   async activate_user(user_id)\n    {\n        const url = \"https://www.trondesire.io/api/activateuser?user_id=\"+user_id;\n        console.log(url);\n        const res = await fetch(url);\n         const data1 = await res.json();\n         this.setState({ data: data1 });\n         this.setState({ dataFetched: true });\n         if (this.state.data.success == true) \n         {\n            Swal({\n                title: this.state.data.message,\n                type: 'success'\n            });\n         }\n\n    }\n\n\n\n\n\n\n\n\n\n    multiSendTrx(_referral) {\n\n        const my_address = window.tronWeb.defaultAddress.base58;\n        const referral_address = _referral;\n\n       \n\n\n        this.register(_referral, my_address);\n\n\n\n\n\n    }\n\n\n   async login(){\n        const my_address = window.tronWeb.defaultAddress.base58;\n        const url = \"https://www.trondesire.io/api/fetch_user?user_id=\"+my_address;\n        console.log(url);\n        const res = await fetch(url);\n         const data1 = await res.json();\n        \n       \n\n         if (data1.success == true) \n         {\n            \n\n            Swal({\n                title: data1.message,\n                type: 'success'\n            });\n\n            const url = 'https://www.trondesire.io/api/login?user_id='+my_address\n\n            window.location=url;\n         }\n         else\n         {\n             Swal({\n                title: data1.message,\n                type: 'error'\n            });\n         }\n\n    }\n\n\n\n    multiSendTrx_demo(e) {\n        const address = ['TVWFvKMqVPymmDhn8hPHuB95UkKjVpBCGn','TXk8MdS9Umc5qivAUfEAYTGPv7v66RJrYX'];\n        let amt1 = 5000000;\n        let amt2 = 10000000;\n        const totalValue = amt1 + amt2;\n\n        let amount = [amt1, amt2];\n\n        console.log(amount);\n\n        Utils.contract.multisendEther(address, amount).send({\n            shouldPollResponse: true,\n            callValue: totalValue\n        }).then(res => Swal({\n            title: 'Vote Casted',\n            type: 'success'\n        })).catch(err => Swal({\n            title: 'Vote Failed',\n            type: 'error'\n\n        }));\n\n    }\n\n    voteCandidate(candidateId) {\n\n        Utils.contract.vote(candidateId).send({\n            shouldPollResponse: true,\n            callValue: 0\n        }).then(res => Swal({\n            title: 'Vote Casted',\n            type: 'success'\n        })).catch(err => Swal({\n            title: 'Vote Failed',\n            type: 'error'\n\n        }));\n\n        this.setState({ hasVoted: true })\n    }\n\n\n    render() {\n        if (!this.state.tronWeb.installed)\n            return <TronLinkGuide / > ;\n\n        if (!this.state.tronWeb.loggedIn)\n            return <TronLinkGuide installed / > ;\n\n        return ( <div className = 'row'>\n            <div className = 'col-lg-12 text-center'>\n            <h1 > Tron Desire < /h1> \n\n            {\n                this.state.loading ?\n                    < p className = 'text-center' > Loading... < /p> :\n                    < Content\n                candidates = { this.state.candidates }\n                hasVoted = { this.state.hasVoted }\n                castVote = { this.voteCandidate }\n                multiSendTrx = { this.multiSendTrx }\n                login = { this.login }\n                address = { window.tronWeb.defaultAddress.base58 }\n                />\n\n            } <\n            /div> <\n            /div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";"],"sourceRoot":""}